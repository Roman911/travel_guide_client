# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type AuthUser {
  token: String!
  user: User!
}

type Comment {
  author: User
  content: String
  createdAt: String
}

type Comments {
  _id: ID!
  author: User
  comments: [Comment]
  createdAt: String
  idAuthor: ID!
  postId: ID!
  text: String!
}

type Locations {
  _id: ID!
  coordinates: [String]
  cover: String
  createdAt: String
  idAuthor: String
  isType: String
  linkToPost: String
  location: [String]
  small_text: String
  tags: [String]
  title: String
}

type LocationsUserList {
  _id: ID
  action: String
  createdAt: String
  locationId: String
  userId: String
}

type Mutation {
  _: String
  addLocationsUserList(addLocation: addLocationInput): LocationsUserList
  addedAnswer(newAnswer: AnswerInput!): Comments
  changeLike(postId: ID!, userId: ID!): Post!
  createComment(newComment: CommentInput!): Comments
  createLocations(locationsInput: LocationsInput): Locations
  registerUser(newUser: UserInput!): AuthUser!
  removeLocationWithUserList(_id: ID!): LocationsUserList
}

type Post {
  _id: ID!
  author: User
  comments: Int
  coordinates: [String]
  cover: String
  createdAt: String
  editor: String
  how_to_get_there: String
  isPrice: String
  isType: String
  likes: [String]
  link: String
  location: Locations
  locationId: String
  small_text: String
  tags: [String]
  text: String
  tickets: [String]
  title: String
  type_material: String
  views: Int
  work_time: String
}

type Query {
  _: String
  allLocations: [Locations]
  allPosts: [Post!]!
  authUser: User!
  author(_id: ID!): User
  comments(postId: ID!): [Comments]
  location(_id: ID!): Locations
  locationsSortByType(type: String): [Locations]
  locationsUser(locationId: ID!, userId: ID!): LocationsUserList
  locationsUserList(action: String!, userId: ID!): [LocationsUserList]
  loginUser(email: String!, password: String!): AuthUser!
  post(_id: ID!): Post!
}

type User {
  _id: ID!
  avatar: String
  email: String
  name: String
  token: String
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

input AnswerInput {
  _id: ID!
  author: ID!
  content: String!
}

input CommentInput {
  author: ID!
  content: String!
  postId: ID!
}

input LocationsInput {
  coordinates: [String]
  cover: String
  idAuthor: String
  isType: String
  linkToPost: String
  location: [String]
  small_text: String
  tags: [String]
  title: String
}

input UserInput {
  email: String!
  name: String!
  password: String!
}

input addLocationInput {
  _id: ID
  action: String
  locationId: ID!
  userId: ID!
}


"The `Upload` scalar type represents a file upload."
scalar Upload